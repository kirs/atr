#! /usr/bin/env ruby
require 'atr/ui'
require 'method_source'

$LOAD_PATH.unshift(File.expand_path('./test'))

require 'optparse'
module Atr
  class << self
    attr_accessor :startup_options, :target_file

    def init_cli
      options = {}
      OptionParser.new do |opts|
        opts.banner = "Usage: example.rb [options]"

        opts.on "-n", "--name PATTERN", "Filter run on /regexp/ or string." do |a|
          options[:filter] = a
        end
      end.parse!

      self.startup_options = options
      self.target_file = File.expand_path(ARGV[0])
    end
  end

  class TestLocation < Struct.new(:file, :suite, :name, :lines_range)
    attr_accessor :failed

    def self.create(suite, method)
      lines = method.source.count("\n")
      start_line = method.source_location[1]
      new(method.source_location[0], suite.to_s, method.name, Range.new(start_line, start_line + lines - 1))
    end

    def label
      "#{suite}##{name}"
    end

    def test_method
      name
    end
  end

  class PatchLocation < Struct.new(:file, :lines_range)
    def self.create(patch)
      range = Range.new(patch.changed_line_numbers.first, patch.changed_line_numbers.last)
      new(patch.file, range)
    end
  end

  module Helpers
    extend self
    def patches_intersect?(patches, test_location)
      patches.any? { |patch| test_location.file.ends_with?(patch.file) && test_location.lines_range.overlaps?(patch.lines_range) }
    end

    def run_in_isolation(&blk)
      read, write = IO.pipe
      read.binmode
      write.binmode

      pid = fork do
        read.close
        computation = yield
        result = Marshal.dump(computation)

        write.puts [result].pack("m")
        exit!
      end

      write.close
      result = read.read
      Process.wait2(pid)
      return Marshal.load(result.unpack("m")[0])
    end
  end
end
Atr.init_cli

# We could boot, but that only works for simple RoR applications
# require_relative '../config/boot'

def load_runnables
  Atr::Helpers.run_in_isolation do
    require Atr.target_file

    suites = Minitest::Runnable.runnables.reject { |s| s.runnable_methods.empty? }#.shuffle
    # if suites.size > 1
    #   raise "Something went wrong. Currently we don't support more than one test suite per file."
    # end

    targets = []
    suites.each do |suite|
      suite.runnable_methods.each do |test_method|
        runnable = suite.new(test_method).method(test_method)
        targets << Atr::TestLocation.create(suite, runnable)
      end
    end
    targets
  end
end

def run_all(filter: nil)
  Atr::Helpers.run_in_isolation do
    require Atr.target_file

    options = { io: $stdout, color: true, output_inline: true }
    reporter = Minitest::CompositeReporter.new
    reporter << Minitest::SummaryReporter.new(options[:io], options)
    reporter << Minitest::ProgressReporter.new(options[:io], options)
    reporter.start

    suites = Minitest::Runnable.runnables.reject { |s| s.runnable_methods.empty? }.shuffle
    targets = []
    suites.each do |suite|
      suite.runnable_methods.each do |test_method|
        # collect runnables, if updated
        runnable = suite.new(test_method).method(test_method)
        test_location = Atr::TestLocation.create(suite, runnable)
        targets << test_location

        if !filter || filter === test_method
          result = Minitest.run_one_method(suite, test_method)
          reporter.record(result)
          test_location.failed = true if result.failure
        end
      end
    end
    reporter.report
    targets
  end
end

runnables = nil
selected_runnables = nil
last_action = nil

if filter = Atr.startup_options[:filter]
  filter = Regexp.new $1 if filter =~ %r%/(.*)/%
  runnables = run_all(filter: filter)
end
first_run = true

loop do
  Atr::UI.print_usage(first_run)
  first_run = false

  action = Atr::UI.action_prompt
  if action == :repeat
    unless last_action
      puts Atr::UI.yellow "No last action recorded"
      next
    end

    action = last_action
    puts Atr::UI.magenta("Repeating last action (#{last_action})...")
    if action == :subset
      puts Atr::UI.green "Running subset of #{selected_runnables.size} tests..."
      runnables = run_all(filter: Regexp.union(*selected_runnables.map(&:name).map(&:to_s)))
      next
    end
  end

  case action
  when :subset
    unless runnables
      puts Atr::UI.green "Loading the list of test cases..."
      runnables = load_runnables
    end

    selected_runnables = Atr::UI.prompt(runnables)
    puts Atr::UI.green "Running #{selected_runnables.size} tests..."
    runnables = run_all(filter: Regexp.union(*selected_runnables.map(&:name).map(&:to_s)))
  when :failed
    unless runnables
      puts Atr::UI.yellow "No tests failed yet"
      next
    end
    failed = runnables.select(&:failed)
    if failed.any?
      puts Atr::UI.green "Running #{failed.size} failed tests..."
      runnables = run_all(filter: Regexp.union(*failed.map(&:name).map(&:to_s)))
    else
      puts Atr::UI.yellow "None tests failed"
    end
  when :all
    puts Atr::UI.green "Running all tests..."
    runnables = run_all
  when :changes
    puts Atr::UI.green "Running changed tests..."
    require 'git_diff_parser'

    patches = GitDiffParser.parse(`git diff`)
    patches = patches.map { |patch| Atr::PatchLocation.create(patch) }

    runnables = Atr::Helpers.run_in_isolation do
      require Atr.target_file

      options = { io: $stdout, color: true, output_inline: true }
      reporter = Minitest::CompositeReporter.new
      reporter << Minitest::SummaryReporter.new(options[:io], options)
      reporter << Minitest::ProgressReporter.new(options[:io], options)
      reporter.start

      suites = Minitest::Runnable.runnables.reject { |s| s.runnable_methods.empty? }.shuffle
      targets = []
      suites.each do |suite|
        suite.runnable_methods.each do |test_method|
          # collect runnables, if updated
          runnable = suite.new(test_method).method(test_method)
          test_location = Atr::TestLocation.create(suite, runnable)
          targets << test_location

          if Atr::Helpers.patches_intersect?(patches, test_location)
            result = Minitest.run_one_method(suite, test_method)
            reporter.record(result)
            test_location.failed = true if result.failure
          end
        end
      end
      reporter.report
      targets
    end
  else
    raise ArgumentError, "Unknown action: #{action}"
  end
  last_action = action
end
